think about how to sort the comments
sort only if depth is equal between consecutive pair
could have an append only list of comments, and 5 sorted indexes pointing to their id, as in posts
need to have indexes of comments, so as not to replicate the posts 5 times
could have recursive indexes? with a flat array of posts/comments
go recursive sort
    dont need a recursive sort because we only need to sort at one level, and we get the exact id from the input request
too many reports stops image/media inlining
reply to comment sends direct parent id, rather than search through all comments looking for it
no fast id lookup with recursive indexes
no fast id lookup with any of the sorted indexes, would have to loop through them all to find the id and sort
need another second index for the sorted indexes, which takes an id and points to the place in the sorted index
comments need to be "unflattened" from the freshness indexes, by just having a flat array for comments and freshness indexes

embedding links/media in posts/comments
previewing posts/comments
trending topics, on submit post/comment, add to EWMA
related topics, on submit pos/comment, add to matrix of EWMA

database can be made efficient by precomputing everything as it comes in, so the search/sort only has to search a single index
the value of a post/comment is a function of the values of replies, and another function of the length, number of links, "quality" metric
maybe tag link with [text, audio, video, image, doc]
import link works like firefox readability, converts html to text, removes extra crap, includes link to original somewhere
content that is embedded is favoured over content that links to external sites (by the value function)
part of the encouragement to embed media is that [image/video/audio] will show up in the link title, attracting more users

cookie user
cookie freshness
link get /[?start=0/20/40/60] use freshness
link get /post/.../#comment-id use freshness
form get /search/.../[&start=0/20/40/60] use freshness
form post /submit_post?text=... use user
form post /submit_comment?post_id=...[&comment_id=...]&text=... use user
plain old http api, great for bots
easy command line integration

count page views too
    count page views but not too many by using a timeout/rate limiter
enshrine linking to social account
maybe append to comment by replying to self
embed media by default, dont allow changing link text, just shorten long links
self sustaining in terms of cost and moderation
efficient website, update everything on change, then a read is simple and fast, caching in the database
no surveillance, no google/facebook tracking or advertising

separate page for preview/submit post and comments
also for javascript fallback, link usually does in-page form, but goes to out-of-page form if javascript disabled
